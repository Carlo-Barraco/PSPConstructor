package pspconstructor.Properties;

import pspconstructor.*;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import pspconstructor.Components.GCHandler;

/**
 *
 * @author Carlo
 */
public class SoundProperties extends javax.swing.JInternalFrame {

    JFileChooser fchSound = new JFileChooser();
    String FilePath = "";
    Music song;
    int Index;

    /** Creates new form infSoundProperties */
    public SoundProperties(int index) {
        initComponents();
        Index = index;
        fchSound.addChoosableFileFilter(new sndFilter());
        fchSound.setAcceptAllFileFilterUsed(false);
        getInfo();
    }

    public void getInfo() {
        txtFile.setText(GCHandler.Sounds.get(Index).Filename);
        FilePath = GCHandler.Sounds.get(Index).FilePath;
        try {
            song = new Music(FilePath);
        } catch (NullPointerException e) {
        }
    }

    public void setInfo() {
        GCHandler.Sounds.get(Index).setFileName(txtFile.getText());
        GCHandler.Sounds.get(Index).setFilePath(FilePath);
        Main.logMain.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPlay = new javax.swing.JButton();
        btnLoadSound = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        lblFile = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Sound Properties");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Sound.png"))); // NOI18N

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Play.png"))); // NOI18N
        btnPlay.setText("Play");
        btnPlay.setPreferredSize(new java.awt.Dimension(55, 23));
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnLoadSound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Open.png"))); // NOI18N
        btnLoadSound.setText("Load Sound");
        btnLoadSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSoundActionPerformed(evt);
            }
        });

        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Check.png"))); // NOI18N
        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lblFile.setText("File:");

        txtFile.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPlay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(btnLoadSound, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(btnOk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFile, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoadSound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFile)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOk)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSoundActionPerformed
        try {
            song.close();
        } catch (NullPointerException e) {
        }
        if (fchSound.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FilePath = fchSound.getSelectedFile().getPath();
            song = new Music(FilePath);
            txtFile.setText(fchSound.getSelectedFile().getName());
            txtFile.setEditable(false);
            File out = new File("./Source/Game/Game/Res/sound" + GCHandler.Sounds.get(Index).ID + "." + IOHandler.getExtension(fchSound.getSelectedFile()));
            try {
                IOHandler.copyFile(new File(fchSound.getSelectedFile().getPath()), out);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
        btnPlay.setText("Play");
        btnPlay.setIcon(new ImageIcon(getClass().getResource("/pspconstructor/Images/Play.png")));
}//GEN-LAST:event_btnLoadSoundActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        try {
            song.close();
        } catch (NullPointerException e) {
        }
        setInfo();
        this.dispose();
}//GEN-LAST:event_btnOkActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        if (btnPlay.getText().equals("Play")) {
            try {
                song.play();
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "Please Load a Sound", "Error", JOptionPane.ERROR_MESSAGE);
            }
            btnPlay.setText("Stop");
            btnPlay.setIcon(new ImageIcon(getClass().getResource("/pspconstructor/Images/Stop.png")));
        } else {
            try {
                song.close();
            } catch (NullPointerException e) {
            }
            btnPlay.setText("Play");
            btnPlay.setIcon(new ImageIcon(getClass().getResource("/pspconstructor/Images/Play.png")));
        }
}//GEN-LAST:event_btnPlayActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadSound;
    public javax.swing.JButton btnOk;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel lblFile;
    private javax.swing.JTextField txtFile;
    // End of variables declaration//GEN-END:variables
}

class sndFilter extends FileFilter {

    String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }

    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }
        String extension = getExtension(f);
        if (extension != null) {
            if (extension.equals("wav") || extension.equals("mp3")) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    public String getDescription() {
        return "Sounds: '.wav','.mp3'";
    }
}
