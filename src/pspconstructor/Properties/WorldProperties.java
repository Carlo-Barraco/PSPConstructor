/*
 * WorldProperties.java
 *
 * Created on Jul 9, 2009, 11:52:51 PM
 */
package pspconstructor.Properties;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.ListCellRenderer;
import pspconstructor.Components.GCBackground;
import pspconstructor.Components.GCHandler;
import pspconstructor.Components.GCObject;
import pspconstructor.Components.WorldObj;
import pspconstructor.Main;

/**
 *
 * @author Carlo
 */
public class WorldProperties extends javax.swing.JInternalFrame {

    WorldPanel world = new WorldPanel();
    int Index;
    JPopupMenu pmuBackgrounds = new JPopupMenu();

    /** Creates new form WorldProperties */
    public WorldProperties(int index) {
        initComponents();
        pnlWorld.add(world);
        Index = index;
        pmuBackgrounds.setAutoscrolls(true);
        for (final GCBackground b : GCHandler.Backgrounds) {
            JMenuItem mniBackground = new JMenuItem(b.Name, new ImageIcon(b.Image.getScaledInstance(60, 34, Image.SCALE_AREA_AVERAGING)));
            mniBackground.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    world.Background = b.Image;
                    GCHandler.Worlds.get(Index).backgroundID = b.ID;
                    world.repaint();
                }
            });
            pmuBackgrounds.add(mniBackground);
        }
        btnEditBackground.setComponentPopupMenu(pmuBackgrounds);
        cboObjectsRenderer renderer = new cboObjectsRenderer();
        cboObjects.setRenderer(renderer);
        getInfo();
        for (GCObject o : GCHandler.Objects) {
            cboObjects.addItem(o.Name);
        }
    }

    public void getInfo() {
        world.Background = GCHandler.Worlds.get(Index).Background.Image;
        world.objs = GCHandler.Worlds.get(Index).objs;
        int woIndex = 0;
        class bool {

            boolean b = false;

            public bool() {
            }

            public void setTrue() {
                b = true;
            }
        }
        ArrayList<bool> alive = new ArrayList<bool>();
        for (WorldObj wo : world.objs) {
            alive.add(new bool());
            for (GCObject o : GCHandler.Objects) {
                if (wo.ID == o.ID) {
                    alive.get(woIndex).setTrue();
                    wo.IIcon = o.Sprite.Image;
                    wo.originX = o.Sprite.OriginX;
                    wo.originY = o.Sprite.OriginY;
                }
            }
            woIndex++;
        }
        for (int index = 0; index < alive.size(); index++) {
            if (!alive.get(index).b) {
                world.objs.remove(index);
                alive.remove(index);
                index--;
            }
        }
    }

    public void setInfo() {
        for (GCBackground b : GCHandler.Backgrounds) {
            if (GCHandler.Worlds.get(Index).backgroundID == b.ID) {
                GCHandler.Worlds.get(Index).Background = b;
            }
        }
        GCHandler.Worlds.get(Index).objs = world.objs;
        Main.logMain.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlWorld = new javax.swing.JPanel();
        lblBackgrounds = new javax.swing.JLabel();
        cboObjects = new javax.swing.JComboBox();
        lblObjects = new javax.swing.JLabel();
        pnlGrid = new javax.swing.JPanel();
        lblWidth = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        btnWidth = new javax.swing.JButton();
        btnHeight = new javax.swing.JButton();
        lblColor = new javax.swing.JLabel();
        pnlColor = new javax.swing.JPanel();
        btnColor = new javax.swing.JButton();
        chkShow = new javax.swing.JCheckBox();
        btnOk = new javax.swing.JButton();
        btnEditBackground = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("World Properties");
        setMaximumSize(new java.awt.Dimension(496, 417));
        setMinimumSize(new java.awt.Dimension(496, 417));
        setPreferredSize(new java.awt.Dimension(496, 417));

        pnlWorld.setBackground(new java.awt.Color(0, 0, 0));
        pnlWorld.setAlignmentX(0.0F);
        pnlWorld.setAlignmentY(0.0F);
        pnlWorld.setMaximumSize(new java.awt.Dimension(480, 272));
        pnlWorld.setMinimumSize(new java.awt.Dimension(480, 272));
        pnlWorld.setPreferredSize(new java.awt.Dimension(480, 272));
        pnlWorld.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlWorldMouseClicked(evt);
            }
        });
        pnlWorld.setLayout(new java.awt.GridLayout(1, 0));

        lblBackgrounds.setText("Background:");

        lblObjects.setText("Objects:");

        pnlGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Grid"));

        lblWidth.setText("Width: 16");

        lblHeight.setText("Height: 16");

        btnWidth.setText("Edit");
        btnWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWidthActionPerformed(evt);
            }
        });

        btnHeight.setText("Edit");
        btnHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeightActionPerformed(evt);
            }
        });

        lblColor.setText("Color:");

        pnlColor.setBackground(java.awt.Color.gray);
        pnlColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlColor.setMaximumSize(new java.awt.Dimension(23, 23));
        pnlColor.setMinimumSize(new java.awt.Dimension(23, 23));
        pnlColor.setPreferredSize(new java.awt.Dimension(23, 23));

        javax.swing.GroupLayout pnlColorLayout = new javax.swing.GroupLayout(pnlColor);
        pnlColor.setLayout(pnlColorLayout);
        pnlColorLayout.setHorizontalGroup(
            pnlColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );
        pnlColorLayout.setVerticalGroup(
            pnlColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        btnColor.setText("Change Colour");
        btnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColorActionPerformed(evt);
            }
        });

        chkShow.setSelected(true);
        chkShow.setText("Show");
        chkShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGridLayout = new javax.swing.GroupLayout(pnlGrid);
        pnlGrid.setLayout(pnlGridLayout);
        pnlGridLayout.setHorizontalGroup(
            pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGridLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeight)
                    .addComponent(lblWidth))
                .addGap(12, 12, 12)
                .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHeight, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnWidth, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGridLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkShow))
                    .addGroup(pnlGridLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnColor, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlGridLayout.setVerticalGroup(
            pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGridLayout.createSequentialGroup()
                .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblWidth)
                        .addComponent(btnWidth)
                        .addComponent(lblColor))
                    .addComponent(pnlColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeight)
                    .addComponent(btnColor)
                    .addComponent(btnHeight)))
        );

        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Check.png"))); // NOI18N
        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnEditBackground.setText("Edit");
        btnEditBackground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditBackgroundMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlWorld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBackgrounds)
                            .addComponent(lblObjects))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEditBackground, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cboObjects, 0, 109, Short.MAX_VALUE)))
                    .addComponent(btnOk, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlWorld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBackgrounds)
                            .addComponent(btnEditBackground))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblObjects)
                            .addComponent(cboObjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(btnOk)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColorActionPerformed
        world.GridColour = JColorChooser.showDialog(null, "Choose Colour", Color.GRAY);
        world.repaint();
        pnlColor.setBackground(world.GridColour);
        pnlColor.repaint();
    }//GEN-LAST:event_btnColorActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        setInfo();
        this.dispose();
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWidthActionPerformed
        try {
            int gridx = Integer.parseInt(JOptionPane.showInputDialog("Enter Grid Width"));
            if (gridx <= 480 && gridx > 0) {
                world.GridX = gridx;
                lblWidth.setText("Width: " + world.GridX);
            } else {
                JOptionPane.showMessageDialog(null, "Dimensions are invalid", "Error", JOptionPane.ERROR_MESSAGE);
            }
            world.repaint();
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_btnWidthActionPerformed

    private void btnHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeightActionPerformed
        try {
            world.GridY = Integer.parseInt(JOptionPane.showInputDialog("Enter Grid Height"));
            lblHeight.setText("Height: " + world.GridY);
            world.repaint();
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_btnHeightActionPerformed

    private void chkShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowActionPerformed
        if (chkShow.isSelected()) {
            world.drawGrid = true;
        } else {
            world.drawGrid = false;
        }
        world.repaint();
    }//GEN-LAST:event_chkShowActionPerformed

    private void btnEditBackgroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditBackgroundMouseClicked
        if (pmuBackgrounds.getComponentCount() > 0) {
            btnEditBackground.getComponentPopupMenu().show(btnEditBackground, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_btnEditBackgroundMouseClicked

    private void pnlWorldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlWorldMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            world.objs.add(new WorldObj(GCHandler.Objects.get(cboObjects.getSelectedIndex()).Sprite.Image, Math.round(evt.getX() / world.GridX) * world.GridX, Math.round(evt.getY() / world.GridY) * world.GridY));
            world.objs.get(world.objs.size() - 1).originX = GCHandler.Objects.get(cboObjects.getSelectedIndex()).Sprite.OriginX;
            world.objs.get(world.objs.size() - 1).originY = GCHandler.Objects.get(cboObjects.getSelectedIndex()).Sprite.OriginY;
            world.objs.get(world.objs.size() - 1).spriteID = GCHandler.Objects.get(cboObjects.getSelectedIndex()).Sprite.ID;
            world.objs.get(world.objs.size() - 1).ID = GCHandler.Objects.get(cboObjects.getSelectedIndex()).ID;
        } else if (evt.getButton() == MouseEvent.BUTTON3) {
            int MX = evt.getX(), MY = evt.getY(), index = 0;
            for (WorldObj wo : world.objs) {
                if (MX > wo.X - wo.originX && MY > wo.Y - wo.originY) {
                    if (MX < wo.X - wo.originX + wo.IIcon.getIconWidth() && MY < wo.Y - wo.originY + wo.IIcon.getIconHeight()) {
                        world.objs.remove(index);
                        break;
                    }
                }
                index += 1;
            }
        }
        world.repaint();
    }//GEN-LAST:event_pnlWorldMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnColor;
    private javax.swing.JButton btnEditBackground;
    private javax.swing.JButton btnHeight;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnWidth;
    public static javax.swing.JComboBox cboObjects;
    private javax.swing.JCheckBox chkShow;
    private javax.swing.JLabel lblBackgrounds;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblObjects;
    private javax.swing.JLabel lblWidth;
    private javax.swing.JPanel pnlColor;
    private javax.swing.JPanel pnlGrid;
    private javax.swing.JPanel pnlWorld;
    // End of variables declaration//GEN-END:variables
}

class WorldPanel extends JPanel {

    int GridX = 16, GridY = 16;
    Color GridColour = Color.GRAY;
    Image Background = new ImageIcon(getClass().getResource("/pspconstructor/Images/Blank.png")).getImage();
    boolean drawGrid = true;
    ArrayList<WorldObj> objs = new ArrayList<WorldObj>();

    public void setGridSize(int x, int y) {
        GridX = x;
        GridY = y;
    }

    @Override
    public void paint(Graphics g) {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 480, 272);
        g.drawImage(Background, 0, 0, null);
        for (WorldObj o : objs) {
            g.drawImage(o.IIcon.getImage(), o.X - o.originX, o.Y - o.originY, null);
        }
        if (drawGrid) {
            g.setColor(GridColour);
            for (int i = 0; i <= 480; i += GridX) {
                g.drawLine(i, 0, i, 272);
            }
            for (int i = GridY; i <= 272; i += GridY) {
                g.drawLine(0, i, 480, i);
            }
        }
    }
}

class cboObjectsRenderer extends JLabel implements ListCellRenderer {

    public cboObjectsRenderer() {
        setHorizontalAlignment(CENTER);
        setVerticalAlignment(CENTER);
        setPreferredSize(new Dimension(100, 24));
    }

    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }
        int selectedIndex = WorldProperties.cboObjects.getSelectedIndex();
        if (index != -1) {
            setIcon(new ImageIcon(GCHandler.Objects.get(index).Sprite.Image.getImage().getScaledInstance(16, 16, Image.SCALE_AREA_AVERAGING)));
            setText(String.valueOf(value));
        } else {
            if (list.getModel().getSize() > 0) {
                setIcon(new ImageIcon(GCHandler.Objects.get(selectedIndex).Sprite.Image.getImage().getScaledInstance(16, 16, Image.SCALE_AREA_AVERAGING)));
                setText(String.valueOf(WorldProperties.cboObjects.getSelectedItem()));
            }
        }
        return this;
    }
}
