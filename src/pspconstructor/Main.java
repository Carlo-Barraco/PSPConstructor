/*
 * Main.java
 *
 * Created on Jun 23, 2009, 3:12:12 PM
 */
package pspconstructor;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.TreeNode;
import pspconstructor.Components.Action;
import pspconstructor.Components.GCBackground;
import pspconstructor.Components.GCFont;
import pspconstructor.Components.GCHandler;
import pspconstructor.Components.GCObject;
import pspconstructor.Components.GCParticle;
import pspconstructor.Components.GCSound;
import pspconstructor.Components.GCSprite;
import pspconstructor.Components.GCWorld;
import pspconstructor.Components.WorldObj;
import pspconstructor.Properties.BackgroundProperties;
import pspconstructor.Properties.FontProperties;
import pspconstructor.Properties.ObjectProperties;
import pspconstructor.Properties.ParticleProperties;
import pspconstructor.Properties.SoundProperties;
import pspconstructor.Properties.SpriteProperties;
import pspconstructor.Properties.WorldProperties;

/**
 *
 * @author Carlo
 */
public class Main extends javax.swing.JFrame {

    public static GCTree logMain;
    public JFileChooser fchFileHandler = new JFileChooser();

    /** Creates new form Main */
    public Main() {
        try {
            for (LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(laf.getName())) {
                    UIManager.setLookAndFeel(laf.getClassName());
                }
            }
        } catch (ClassNotFoundException ex) {
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        } catch (UnsupportedLookAndFeelException ex) {
        }
        initComponents();
        logMain = new GCTree();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/PSP256.png")).getImage());
        scpMain.setViewportView(logMain);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbrMain = new javax.swing.JToolBar();
        btnNewGame = new javax.swing.JButton();
        btnOpenGame = new javax.swing.JButton();
        btnSaveGame = new javax.swing.JButton();
        seperator1 = new javax.swing.JToolBar.Separator();
        btnGenerateCode = new javax.swing.JButton();
        btnTestGame = new javax.swing.JButton();
        btnGenerateEBOOT = new javax.swing.JButton();
        separator2 = new javax.swing.JToolBar.Separator();
        btnAddSprite = new javax.swing.JButton();
        btnAddSound = new javax.swing.JButton();
        btnAddBackground = new javax.swing.JButton();
        btnAddParticles = new javax.swing.JButton();
        btnAddFont = new javax.swing.JButton();
        btnAddObject = new javax.swing.JButton();
        btnAddWorld = new javax.swing.JButton();
        scpMain = new javax.swing.JScrollPane();
        dskMain = new javax.swing.JDesktopPane();
        mnbMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniNewGame = new javax.swing.JMenuItem();
        mniOpenGame = new javax.swing.JMenuItem();
        mniSaveGame = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuResources = new javax.swing.JMenu();
        mniAddSprite = new javax.swing.JMenuItem();
        mniAddSound = new javax.swing.JMenuItem();
        mniAddBackground = new javax.swing.JMenuItem();
        mniAddParticles = new javax.swing.JMenuItem();
        mniAddFont = new javax.swing.JMenuItem();
        mniAddObject = new javax.swing.JMenuItem();
        mniAddWorld = new javax.swing.JMenuItem();
        mnuGame = new javax.swing.JMenu();
        mniGenerateCode = new javax.swing.JMenuItem();
        mniTest = new javax.swing.JMenuItem();
        mniGenerateEBOOT = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PSPConstructor");

        tbrMain.setFloatable(false);
        tbrMain.setRollover(true);

        btnNewGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/New.png"))); // NOI18N
        btnNewGame.setToolTipText("New Game");
        btnNewGame.setBorder(null);
        btnNewGame.setBorderPainted(false);
        btnNewGame.setFocusable(false);
        btnNewGame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewGame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });
        tbrMain.add(btnNewGame);

        btnOpenGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Open.png"))); // NOI18N
        btnOpenGame.setToolTipText("Open Game");
        btnOpenGame.setBorder(null);
        btnOpenGame.setBorderPainted(false);
        btnOpenGame.setFocusable(false);
        btnOpenGame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenGame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbrMain.add(btnOpenGame);

        btnSaveGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Save.png"))); // NOI18N
        btnSaveGame.setToolTipText("Save Game");
        btnSaveGame.setBorder(null);
        btnSaveGame.setBorderPainted(false);
        btnSaveGame.setFocusable(false);
        btnSaveGame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveGame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGameActionPerformed(evt);
            }
        });
        tbrMain.add(btnSaveGame);

        seperator1.setMinimumSize(null);
        tbrMain.add(seperator1);

        btnGenerateCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Build.png"))); // NOI18N
        btnGenerateCode.setToolTipText("Generate Code");
        btnGenerateCode.setBorder(null);
        btnGenerateCode.setBorderPainted(false);
        btnGenerateCode.setFocusable(false);
        btnGenerateCode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerateCode.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerateCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateCodeActionPerformed(evt);
            }
        });
        tbrMain.add(btnGenerateCode);

        btnTestGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Test.png"))); // NOI18N
        btnTestGame.setToolTipText("Test Game");
        btnTestGame.setBorder(null);
        btnTestGame.setBorderPainted(false);
        btnTestGame.setFocusable(false);
        btnTestGame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTestGame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTestGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestGameActionPerformed(evt);
            }
        });
        tbrMain.add(btnTestGame);

        btnGenerateEBOOT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/EBOOT.png"))); // NOI18N
        btnGenerateEBOOT.setToolTipText("Generate EBOOT");
        btnGenerateEBOOT.setBorder(null);
        btnGenerateEBOOT.setBorderPainted(false);
        btnGenerateEBOOT.setFocusable(false);
        btnGenerateEBOOT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerateEBOOT.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerateEBOOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateEBOOTActionPerformed(evt);
            }
        });
        tbrMain.add(btnGenerateEBOOT);
        tbrMain.add(separator2);

        btnAddSprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Sprite.png"))); // NOI18N
        btnAddSprite.setToolTipText("Add a Sprite");
        btnAddSprite.setBorder(null);
        btnAddSprite.setBorderPainted(false);
        btnAddSprite.setFocusable(false);
        btnAddSprite.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddSprite.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddSprite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSpriteActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddSprite);

        btnAddSound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Sound.png"))); // NOI18N
        btnAddSound.setToolTipText("Add a Sound");
        btnAddSound.setBorder(null);
        btnAddSound.setBorderPainted(false);
        btnAddSound.setFocusable(false);
        btnAddSound.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddSound.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSoundActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddSound);

        btnAddBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Background.png"))); // NOI18N
        btnAddBackground.setToolTipText("Add a Background");
        btnAddBackground.setBorder(null);
        btnAddBackground.setBorderPainted(false);
        btnAddBackground.setFocusable(false);
        btnAddBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddBackground.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBackgroundActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddBackground);

        btnAddParticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Particle.png"))); // NOI18N
        btnAddParticles.setToolTipText("Add a Particle System");
        btnAddParticles.setBorder(null);
        btnAddParticles.setBorderPainted(false);
        btnAddParticles.setFocusable(false);
        btnAddParticles.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddParticles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddParticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParticlesActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddParticles);

        btnAddFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Font.png"))); // NOI18N
        btnAddFont.setToolTipText("Add a Font");
        btnAddFont.setBorder(null);
        btnAddFont.setBorderPainted(false);
        btnAddFont.setFocusable(false);
        btnAddFont.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddFont.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFontActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddFont);

        btnAddObject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Object.png"))); // NOI18N
        btnAddObject.setToolTipText("Add an Object");
        btnAddObject.setBorder(null);
        btnAddObject.setBorderPainted(false);
        btnAddObject.setFocusable(false);
        btnAddObject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddObject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddObjectActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddObject);

        btnAddWorld.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/World.png"))); // NOI18N
        btnAddWorld.setToolTipText("Add a World");
        btnAddWorld.setBorder(null);
        btnAddWorld.setBorderPainted(false);
        btnAddWorld.setFocusable(false);
        btnAddWorld.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddWorld.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddWorld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWorldActionPerformed(evt);
            }
        });
        tbrMain.add(btnAddWorld);

        scpMain.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scpMain.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scpMain.setMaximumSize(new java.awt.Dimension(175, 428));
        scpMain.setMinimumSize(new java.awt.Dimension(175, 428));
        scpMain.setPreferredSize(new java.awt.Dimension(175, 428));

        dskMain.setBackground(new java.awt.Color(153, 153, 255));
        dskMain.setMaximumSize(new java.awt.Dimension(469, 428));
        dskMain.setMinimumSize(new java.awt.Dimension(469, 428));

        mnbMain.setMaximumSize(new java.awt.Dimension(56, 21));

        mnuFile.setText("File");

        mniNewGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNewGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/New.png"))); // NOI18N
        mniNewGame.setText("New Game");
        mnuFile.add(mniNewGame);

        mniOpenGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpenGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Open.png"))); // NOI18N
        mniOpenGame.setText("Open Game");
        mnuFile.add(mniOpenGame);

        mniSaveGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSaveGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Save.png"))); // NOI18N
        mniSaveGame.setText("Save Game");
        mnuFile.add(mniSaveGame);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mniExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Exit.png"))); // NOI18N
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnbMain.add(mnuFile);

        mnuResources.setText("Resources");

        mniAddSprite.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        mniAddSprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Sprite.png"))); // NOI18N
        mniAddSprite.setText("Add a Sprite");
        mniAddSprite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddSpriteActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddSprite);

        mniAddSound.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        mniAddSound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Sound.png"))); // NOI18N
        mniAddSound.setText("Add a Sound");
        mniAddSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddSoundActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddSound);

        mniAddBackground.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        mniAddBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Background.png"))); // NOI18N
        mniAddBackground.setText("Add a Background");
        mniAddBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddBackgroundActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddBackground);

        mniAddParticles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        mniAddParticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Particle.png"))); // NOI18N
        mniAddParticles.setText("Add a Particle System");
        mniAddParticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddParticlesActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddParticles);

        mniAddFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_MASK));
        mniAddFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Font.png"))); // NOI18N
        mniAddFont.setText("Add a Font");
        mniAddFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddFontActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddFont);

        mniAddObject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        mniAddObject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Object.png"))); // NOI18N
        mniAddObject.setText("Add an Object");
        mniAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddObjectActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddObject);

        mniAddWorld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        mniAddWorld.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/World.png"))); // NOI18N
        mniAddWorld.setText("Add a World");
        mniAddWorld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddWorldActionPerformed(evt);
            }
        });
        mnuResources.add(mniAddWorld);

        mnbMain.add(mnuResources);

        mnuGame.setText("Game");

        mniGenerateCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Build.png"))); // NOI18N
        mniGenerateCode.setText("Generate Code");
        mniGenerateCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniGenerateCodeActionPerformed(evt);
            }
        });
        mnuGame.add(mniGenerateCode);

        mniTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Test.png"))); // NOI18N
        mniTest.setText("Test Game");
        mniTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniTestActionPerformed(evt);
            }
        });
        mnuGame.add(mniTest);

        mniGenerateEBOOT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/EBOOT.png"))); // NOI18N
        mniGenerateEBOOT.setText("Generate EBOOT");
        mniGenerateEBOOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniGenerateEBOOTActionPerformed(evt);
            }
        });
        mnuGame.add(mniGenerateEBOOT);

        mnbMain.add(mnuGame);

        mnuHelp.setText("Help");

        mniAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/About.png"))); // NOI18N
        mniAbout.setText("About");
        mniAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mniAbout);

        mnbMain.add(mnuHelp);

        setJMenuBar(mnbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbrMain, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scpMain, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dskMain, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbrMain, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dskMain, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(scpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    public void addGC(final int TypeIndex) {
        String Type = "Sprite", type = "sprite";
        if (TypeIndex == 0) {
            Type = "Sprite";
            type = "sprite";
        } else if (TypeIndex == 1) {
            Type = "Sound";
            type = "sound";
        } else if (TypeIndex == 2) {
            Type = "Background";
            type = "background";
        } else if (TypeIndex == 3) {
            Type = "Particle";
            type = "particle";
        } else if (TypeIndex == 4) {
            Type = "Font";
            type = "font";
        } else if (TypeIndex == 5) {
            Type = "Object";
            type = "object";
        } else if (TypeIndex == 6) {
            Type = "World";
            type = "world";
        }
        JMenuItem mniNew = new JMenuItem("New " + Type);
        mniNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Add.png")));
        mniNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, java.awt.event.InputEvent.ALT_MASK));
        mniNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (TypeIndex == 0) {
                    addSprite();
                } else if (TypeIndex == 1) {
                    addSound();
                } else if (TypeIndex == 2) {
                    addBackground();
                } else if (TypeIndex == 3) {
                    addParticle();
                } else if (TypeIndex == 4) {
                    addFont();
                } else if (TypeIndex == 5) {
                    addObject();
                } else if (TypeIndex == 6) {
                    addWorld();
                }
            }
        });
        JMenuItem mniDelete = new JMenuItem("Delete");
        mniDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Delete.png")));
        mniDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK));
        mniDelete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int sel = JOptionPane.showConfirmDialog(null, "Do you want to delete this Component?", "Delete Component", JOptionPane.YES_NO_OPTION);
                int currentIndex = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                if (sel == JOptionPane.YES_OPTION) {
                    if (TypeIndex == 0) {
                        IOHandler.deleteFile(new File("./Source/Game/Game/Res/sprite" + GCHandler.Sprites.get(currentIndex).ID + "." + IOHandler.getExtension(new File(GCHandler.Sprites.get(currentIndex).Filename))));
                        GCHandler.Sprites.remove(currentIndex);
                    } else if (TypeIndex == 1) {
                        GCHandler.Sounds.remove(currentIndex);
                    } else if (TypeIndex == 2) {
                        GCHandler.Backgrounds.remove(currentIndex);
                    } else if (TypeIndex == 3) {
                        GCHandler.Particles.remove(currentIndex);
                    } else if (TypeIndex == 4) {
                        GCHandler.Fonts.remove(currentIndex);
                    } else if (TypeIndex == 5) {
                        GCHandler.Objects.remove(currentIndex);
                    } else if (TypeIndex == 6) {
                        GCHandler.Worlds.remove(currentIndex);
                    }
                    logMain.removeCurrentNode();
                    logMain.repaint();
                }
            }
        });
        JMenuItem mniRename = new JMenuItem("Rename");
        mniRename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Rename.png")));
        mniRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, java.awt.event.InputEvent.ALT_MASK));
        mniRename.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logMain.renameCurrentNode();
                logMain.repaint();
            }
        });
        JMenuItem mniProperties = new JMenuItem("Properties");
        mniProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pspconstructor/Images/Properties.png")));
        mniProperties.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.ALT_MASK));
        mniProperties.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int index;
                if (TypeIndex == 0) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    SpriteProperties SpriteProp = new SpriteProperties(index);
                    dskMain.add(SpriteProp);
                    SpriteProp.setVisible(true);
                } else if (TypeIndex == 1) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    SoundProperties SoundProp = new SoundProperties(index);
                    dskMain.add(SoundProp);
                    SoundProp.setVisible(true);
                } else if (TypeIndex == 2) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    BackgroundProperties BackgroundProp = new BackgroundProperties(index);
                    dskMain.add(BackgroundProp);
                    BackgroundProp.setVisible(true);
                } else if (TypeIndex == 3) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    ParticleProperties ParticleProp = new ParticleProperties(index);
                    dskMain.add(ParticleProp);
                    ParticleProp.setVisible(true);
                } else if (TypeIndex == 4) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    FontProperties FontProp = new FontProperties(index);
                    dskMain.add(FontProp);
                    FontProp.setVisible(true);
                } else if (TypeIndex == 5) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    ObjectProperties ObjProp = new ObjectProperties(index);
                    dskMain.add(ObjProp);
                    ObjProp.setVisible(true);
                } else if (TypeIndex == 6) {
                    index = logMain.tnGC.getChildAt(TypeIndex).getIndex((TreeNode) (logMain.getSelectionPath().getLastPathComponent()));
                    WorldProperties WorldProp = new WorldProperties(index);
                    dskMain.add(WorldProp);
                    WorldProp.setVisible(true);
                }
            }
        });
        JMenuItem[] items = {
            mniNew, mniDelete, mniRename, mniProperties
        };
        logMain.addObject((GCNode) logMain.tnGC.getChildAt(TypeIndex), type + GCHandler.Count[TypeIndex], type + GCHandler.Count[TypeIndex], items);

        if (TypeIndex == 0) {
            GCHandler.Sprites.add(new GCSprite(type + GCHandler.Count[TypeIndex]));
            GCHandler.Sprites.get(GCHandler.Sprites.size() - 1).ID = GCHandler.Count[TypeIndex];
            SpriteProperties SpriteProp = new SpriteProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(SpriteProp);
            SpriteProp.setVisible(true);
        } else if (TypeIndex == 1) {
            GCHandler.Sounds.add(new GCSound(type + GCHandler.Count[TypeIndex]));
            GCHandler.Sounds.get(GCHandler.Sounds.size() - 1).ID = GCHandler.Count[TypeIndex];
            SoundProperties SoundProp = new SoundProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(SoundProp);
            SoundProp.setVisible(true);
        } else if (TypeIndex == 2) {
            GCHandler.Backgrounds.add(new GCBackground(type + GCHandler.Count[TypeIndex]));
            GCHandler.Backgrounds.get(GCHandler.Backgrounds.size() - 1).ID = GCHandler.Count[TypeIndex];
            BackgroundProperties BackgroundProp = new BackgroundProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(BackgroundProp);
            BackgroundProp.setVisible(true);
        } else if (TypeIndex == 3) {
            GCHandler.Particles.add(new GCParticle(type + GCHandler.Count[TypeIndex]));
            GCHandler.Particles.get(GCHandler.Particles.size() - 1).ID = GCHandler.Count[TypeIndex];
            ParticleProperties ParticleProp = new ParticleProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(ParticleProp);
            ParticleProp.setVisible(true);
        } else if (TypeIndex == 4) {
            GCHandler.Fonts.add(new GCFont(type + GCHandler.Count[TypeIndex]));
            GCHandler.Fonts.get(GCHandler.Fonts.size() - 1).ID = GCHandler.Count[TypeIndex];
            FontProperties FontProp = new FontProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(FontProp);
            FontProp.setVisible(true);
        } else if (TypeIndex == 5) {
            GCHandler.Objects.add(new GCObject(type + GCHandler.Count[TypeIndex]));
            GCHandler.Objects.get(GCHandler.Objects.size() - 1).ID = GCHandler.Count[TypeIndex];
            ObjectProperties ObjProp = new ObjectProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(ObjProp);
            ObjProp.setVisible(true);
        } else if (TypeIndex == 6) {
            GCHandler.Worlds.add(new GCWorld(type + GCHandler.Count[TypeIndex]));
            WorldProperties WorldProp = new WorldProperties(logMain.tnGC.getChildAt(TypeIndex).getChildCount() - 1);
            dskMain.add(WorldProp);
            WorldProp.setVisible(true);
        }
        GCHandler.Count[TypeIndex] += 1;
    }

    public void generateCode() {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("./Source/Game/Game/GameApp.cpp"));
            out.write("#include \"GameApp.h\"\n\n");
            out.write("vector<JTexture*> sprTexs;\n");
            out.write("vector<JTexture*> bgTexs;\n");
            out.write("vector<JQuad*> bgQuads;\n");
            out.write("vector<JMusic*> sounds;\n");
            out.write("vector<hgeFont*> fonts;\n");
            out.write("vector<hgeParticleSystem*> particles;\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("vector<" + o.Name + "*> " + o.Name + "s[" + GCHandler.Worlds.size() + "];\n");
            }
            out.write("int WorldIndex = 0;\n\n");
            for (GCObject o : GCHandler.Objects) {
                out.write(o.Name + "::" + o.Name + "(int x, int y,JTexture* tex)\n{\nX = x;\nY = y;\nSpriteTex = tex;\nAngle=0;\nXScale=1;\nYScale=1;\n");
                if (!o.Sprite.Filename.isEmpty()) {
                    out.write("SpriteQuad = new JQuad(SpriteTex, 0, 0," + o.Sprite.Width + "," + o.Sprite.Height + ");\n");
                    out.write("SpriteQuad->SetHotSpot(" + o.Sprite.OriginX + "," + o.Sprite.OriginY + ");\n");
                }
                out.write("}\n");
                out.write("void " + o.Name + "::Create()\n{\n");
                for (ArrayList<Action> aa : o.Actions) {
                    for (Action a : aa) {
                        String temp = a.Create;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                }
                for (GCParticle p : GCHandler.Particles) {
                    if (!p.Filename.isEmpty()) {
                        out.write("pparticles.push_back(new hgeParticleSystem(\"particle" + p.ID + "." + IOHandler.getExtension(new File(p.Filename)) + "\",new JQuad(sprTexs.at(" + p.Sprite.ID + "),0,0," + p.Sprite.Width + "," + p.Sprite.Height + ")));\n");
                        out.write("pparticles.at(pparticles.size()-1)->info.sprite->SetHotSpot(" + p.Sprite.OriginX + "," + p.Sprite.OriginY + ");\n");
                    }
                }
                out.write("}\nvoid " + o.Name + "::Destroy()\n{\n");
                for (ArrayList<Action> aa : o.Actions) {
                    for (Action a : aa) {
                        String temp = a.Destroy;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                }
                out.write("}\nvoid " + o.Name + "::Update()\n{\n");
                out.write("X += HSpeed;\nY += VSpeed;\n");
                out.write("for (int j=0;j<pparticles.size();j++)\n{\npparticles.at(j)->Update(JGE::GetInstance()->GetDelta());\n}\n");
                for (ArrayList<Action> aa : o.Actions) {
                    String code = "";
                    for (Action a : aa) {
                        code += a.Update;
                    }
                    for (GCObject obj:GCHandler.Objects){
                        if (o.Events.get(o.Actions.indexOf(aa)).Name.equals(obj.Name)){
                            out.write("for (int j=0;j<"+obj.Name+"s[WorldIndex].size();j++)\n{\n");
                        }
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("if (" + o.Events.get(o.Actions.indexOf(aa)).Condition + ")\n{\n");
                    }

                    for (Action a : aa) {
                        String temp = a.Update;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                    for (GCObject obj:GCHandler.Objects){
                        if (o.Events.get(o.Actions.indexOf(aa)).Name.equals(obj.Name)){
                            out.write("}\n");
                        }
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("}\n");
                    }
                }
                out.write("}\nvoid " + o.Name + "::Render()\n{\n");
                    out.write("for (int j=0;j<pparticles.size();j++)\n{\n");
                    out.write("pparticles.at(j)->Render();\n}\n");
                if (!o.Sprite.Filename.isEmpty()) {
                    out.write("JRenderer::GetInstance()->RenderQuad(SpriteQuad,X,Y,Angle,XScale,YScale);\n");
                }
                for (ArrayList<Action> aa : o.Actions) {
                    String code = "";
                    for (Action a : aa) {
                        code += a.Render;
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("if (" + o.Events.get(o.Actions.indexOf(aa)).Condition + ")\n{\n");
                    }
                    for (Action a : aa) {
                        String temp = a.Render;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("}\n");
                    }
                }
                out.write("}\nvoid " + o.Name + "::Pause()\n{\n");
                for (ArrayList<Action> aa : o.Actions) {
                    String code = "";
                    for (Action a : aa) {
                        code += a.Pause;
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("if (" + o.Events.get(o.Actions.indexOf(aa)).Condition + ")\n{\n");
                    }
                    for (Action a : aa) {
                        String temp = a.Pause;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("}\n");
                    }
                }
                out.write("}\nvoid " + o.Name + "::Resume()\n{\n");
                for (ArrayList<Action> aa : o.Actions) {
                    String code = "";
                    for (Action a : aa) {
                        code += a.Resume;
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("if (" + o.Events.get(o.Actions.indexOf(aa)).Condition + ")\n{\n");
                    }
                    for (Action a : aa) {
                        String temp = a.Resume;
                        for (int i = 0; i < a.Args.size(); i++) {
                            temp = temp.replaceAll("arg" + i, a.Args.get(i));
                        }
                        out.write(temp);
                    }
                    if (!o.Events.get(o.Actions.indexOf(aa)).Name.equals("Do") && !code.isEmpty()) {
                        out.write("}\n");
                    }
                }
                out.write("}\n");
            }
            out.write("GameApp::GameApp()\n{\n");
            for (GCSprite s : GCHandler.Sprites) {
                if (!s.Filename.isEmpty()) {
                    out.write("sprTexs.push_back(JRenderer::GetInstance()->LoadTexture(\"sprite" + s.ID + "." + IOHandler.getExtension(new File(s.Filename)) + "\",TEX_TYPE_USE_VRAM));\n");
                }
            }
            for (GCBackground b : GCHandler.Backgrounds) {
                if (!b.Filename.isEmpty()) {
                    out.write("bgTexs.push_back(JRenderer::GetInstance()->LoadTexture(\"background" + b.ID + "." + IOHandler.getExtension(new File(b.Filename)) + "\"));\n");
                    out.write("bgQuads.push_back(new JQuad(bgTexs.at(bgTexs.size()-1),0,0,480,272));\n");
                }
            }
            for (GCSound s : GCHandler.Sounds) {
                if (!s.Filename.isEmpty()) {
                    out.write("sounds.push_back(JSoundSystem::GetInstance()->LoadMusic(\"sound" + s.ID + "." + IOHandler.getExtension(new File(s.Filename)) + "\"));\n");
                }
            }
            for (GCFont f : GCHandler.Fonts) {
                if (!f.Filename.isEmpty()) {
                    out.write("fonts.push_back(new hgeFont(\"font" + f.ID + "." + IOHandler.getExtension(new File(f.Filename)) + "\"));\n");
                }
            }
            for (GCParticle p : GCHandler.Particles) {
                if (!p.Filename.isEmpty()) {
                    out.write("particles.push_back(new hgeParticleSystem(\"particle" + p.ID + "." + IOHandler.getExtension(new File(p.Filename)) + "\",new JQuad(sprTexs.at(" + p.Sprite.ID + "),0,0," + p.Sprite.Width + "," + p.Sprite.Height + ")));\n");
                    out.write("particles.at(particles.size()-1)->info.sprite->SetHotSpot(" + p.Sprite.OriginX + "," + p.Sprite.OriginY + ");\n");
                }
            }
            for (GCObject o : GCHandler.Objects) {
                for (GCWorld w : GCHandler.Worlds) {
                    for (WorldObj wo : w.objs) {
                        if (wo.ID == o.ID) {
                            out.write(o.Name + "s[" + GCHandler.Worlds.indexOf(w) + "].push_back(new " + o.Name + "(" + wo.X + "," + wo.Y + ",sprTexs.at(" + GCHandler.Sprites.indexOf(o.Sprite) + ")));\n");
                        }
                    }
                }
            }
            out.write("}\n\nGameApp::~GameApp()\n{\n}\n\n");
            out.write("void GameApp::Create()\n{\n");
            out.write("JRenderer::GetInstance()->EnableVSync(true);\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int i=0;i<" + GCHandler.Worlds.size() + ";i++)\n{\n");
                out.write("for (int j=0;j<" + o.Name + "s[i].size();j++)\n{\n");
                out.write(o.Name + "s[i].at(j)->Create();\n}\n}\n");
            }
            out.write("}\n\nvoid GameApp::Destroy()\n{\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int i=0;i<" + GCHandler.Worlds.size() + ";i++)\n{\n");
                out.write("for (int j=0;j<" + o.Name + "s[i].size();j++)\n{\n");
                out.write(o.Name + "s[i].at(j)->Destroy();\n}\n}\n");
            }
            out.write("}\n\nvoid GameApp::Update()\n{\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int j=0;j<" + o.Name + "s[WorldIndex].size();j++)\n{\n");
                out.write(o.Name + "s[WorldIndex].at(j)->Update();\n}\n");
            }
            for (GCParticle p : GCHandler.Particles) {
                out.write("for (int j=0;j<particles.size();j++)\n{\n");
                out.write("particles.at(j)->Update(JGE::GetInstance()->GetDelta());\n}\n");
            }
            out.write("}\n\nvoid GameApp::Render()\n{\n");
            out.write("JRenderer* renderer = JRenderer::GetInstance();\nrenderer->ClearScreen(ARGB(0,0,0,0));\n");
            for (GCWorld w : GCHandler.Worlds) {
                for (GCBackground b : GCHandler.Backgrounds) {
                    if (w.backgroundID == b.ID) {
                        out.write("if (WorldIndex == " + GCHandler.Worlds.indexOf(w) + ")\n{\nrenderer->RenderQuad(bgQuads.at(" + GCHandler.Backgrounds.indexOf(b) + "),0,0);\n}\n");
                    }
                }
            }
            for (GCParticle p : GCHandler.Particles) {
                out.write("for (int j=0;j<particles.size();j++)\n{\n");
                out.write("particles.at(j)->Render();\n}\n");
            }
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int j=0;j<" + o.Name + "s[WorldIndex].size();j++)\n{\n");
                out.write(o.Name + "s[WorldIndex].at(j)->Render();\n}\n");
            }
            out.write("}\n\nvoid GameApp::Pause()\n{\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int j=0;j<" + o.Name + "s[WorldIndex].size();j++)\n{\n");
                out.write(o.Name + "s[WorldIndex].at(j)->Pause();\n}\n");
            }
            out.write("}\n\nvoid GameApp::Resume()\n{\n");
            for (GCObject o : GCHandler.Objects) {
                out.write("for (int j=0;j<" + o.Name + "s[WorldIndex].size();j++)\n{\n");
                out.write(o.Name + "s[WorldIndex].at(j)->Resume();\n}\n");
            }
            out.write("}");
            out.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("./Source/Game/Game/GameApp.h"));
            out.write("#ifndef _GAMEAPP_H_\n#define _GAMEAPP_H_\n");
            out.write("#include <stdio.h>\n#include <vector>\n#include <JGE.h>\n#include <JRenderer.h>\n#include <JApp.h>\n#include <JSoundSystem.h>\n#include <hge/hgeparticle.h>\n#include <hge/hgefont.h>\n#include <JLBFont.h>\n\nusing namespace std;\n\n");
            out.write("class GameApp:public JApp\n{\npublic:\nGameApp();\nvirtual ~GameApp();\nvirtual void Create();\nvirtual void Destroy();\nvirtual void Update();\nvirtual void Render();\nvirtual void Pause();\nvirtual void Resume();\n};");
            for (GCObject o : GCHandler.Objects) {
                out.write("\nclass " + o.Name + "\n{\npublic:\nfloat X,Y,Angle,XScale,YScale,HSpeed,VSpeed;\nJTexture* SpriteTex;\nJQuad* SpriteQuad;\nvector<hgeParticleSystem*> pparticles;\n");
                out.write(o.Name + "(int x, int y,JTexture* tex);\n");
                out.write("void Create();\n");
                out.write("void Destroy();\n");
                out.write("void Update();\n");
                out.write("void Render();\n");
                out.write("void Pause();\n");
                out.write("void Resume();\n");
                out.write("};\n");
            }
            out.write("\n#endif");
            out.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void runGame() {
        try {
            String command = "rundll32 SHELL32.DLL,ShellExec_RunDLL " + new File("./Source/Game/RunGame.bat").getCanonicalPath();
            Runtime.getRuntime().exec(command);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void generateEBOOT() {
        try {
            String command = "rundll32 SHELL32.DLL,ShellExec_RunDLL " + new File("./Source/Game/Game/mk3xx.bat").getCanonicalPath();
            Runtime.getRuntime().exec(command);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void addSprite() {
        addGC(0);
    }

    public void addSound() {
        addGC(1);
    }

    public void addBackground() {
        addGC(2);
    }

    public void addParticle() {
        addGC(3);
    }

    public void addFont() {
        addGC(4);
    }

    public void addObject() {
        addGC(5);
    }

    public void addWorld() {
        addGC(6);
    }
    private void btnAddSpriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSpriteActionPerformed
        addSprite();
    }//GEN-LAST:event_btnAddSpriteActionPerformed

    private void btnAddSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSoundActionPerformed
        addSound();
    }//GEN-LAST:event_btnAddSoundActionPerformed

    private void btnAddBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBackgroundActionPerformed
        addBackground();
    }//GEN-LAST:event_btnAddBackgroundActionPerformed

    private void btnAddParticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParticlesActionPerformed
        addParticle();
    }//GEN-LAST:event_btnAddParticlesActionPerformed

    private void btnAddFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFontActionPerformed
        addFont();
}//GEN-LAST:event_btnAddFontActionPerformed

    private void btnAddObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddObjectActionPerformed
        addObject();
    }//GEN-LAST:event_btnAddObjectActionPerformed

    private void btnAddWorldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWorldActionPerformed
        addWorld();
    }//GEN-LAST:event_btnAddWorldActionPerformed

    private void mniAddSpriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddSpriteActionPerformed
        addSprite();
    }//GEN-LAST:event_mniAddSpriteActionPerformed

    private void mniAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAboutActionPerformed
        String HTML;
        HTML =
                "<html>";
        HTML +=
                "<p>PSPConstructor - Version 1.0</p><br><p>CBaroX, June 23, 2009</p><br></html>";
        JOptionPane.showMessageDialog(null, HTML, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mniAboutActionPerformed

    private void mniAddSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddSoundActionPerformed
        addSound();
    }//GEN-LAST:event_mniAddSoundActionPerformed

    private void mniAddBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddBackgroundActionPerformed
        addBackground();
    }//GEN-LAST:event_mniAddBackgroundActionPerformed

    private void mniGenerateCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniGenerateCodeActionPerformed
        generateCode();
    }//GEN-LAST:event_mniGenerateCodeActionPerformed

    private void mniTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTestActionPerformed
        generateCode();
        runGame();
    }//GEN-LAST:event_mniTestActionPerformed

    private void btnSaveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGameActionPerformed
        fchFileHandler.showSaveDialog(null);
    }//GEN-LAST:event_btnSaveGameActionPerformed

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed
    }//GEN-LAST:event_btnNewGameActionPerformed

    private void mniAddParticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddParticlesActionPerformed
        addParticle();
    }//GEN-LAST:event_mniAddParticlesActionPerformed

    private void mniAddFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddFontActionPerformed
        addFont();
    }//GEN-LAST:event_mniAddFontActionPerformed

    private void mniAddObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddObjectActionPerformed
        addObject();
    }//GEN-LAST:event_mniAddObjectActionPerformed

    private void mniAddWorldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddWorldActionPerformed
        addWorld();
    }//GEN-LAST:event_mniAddWorldActionPerformed

    private void btnGenerateCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateCodeActionPerformed
        generateCode();
    }//GEN-LAST:event_btnGenerateCodeActionPerformed

    private void btnTestGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestGameActionPerformed
        generateCode();
        runGame();
    }//GEN-LAST:event_btnTestGameActionPerformed

    private void btnGenerateEBOOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateEBOOTActionPerformed
        generateCode();
        generateEBOOT();
    }//GEN-LAST:event_btnGenerateEBOOTActionPerformed

    private void mniGenerateEBOOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniGenerateEBOOTActionPerformed
        generateCode();
        generateEBOOT();
    }//GEN-LAST:event_mniGenerateEBOOTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBackground;
    private javax.swing.JButton btnAddFont;
    private javax.swing.JButton btnAddObject;
    private javax.swing.JButton btnAddParticles;
    private javax.swing.JButton btnAddSound;
    private javax.swing.JButton btnAddSprite;
    private javax.swing.JButton btnAddWorld;
    private javax.swing.JButton btnGenerateCode;
    private javax.swing.JButton btnGenerateEBOOT;
    private javax.swing.JButton btnNewGame;
    private javax.swing.JButton btnOpenGame;
    private javax.swing.JButton btnSaveGame;
    private javax.swing.JButton btnTestGame;
    public static javax.swing.JDesktopPane dskMain;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniAddBackground;
    private javax.swing.JMenuItem mniAddFont;
    private javax.swing.JMenuItem mniAddObject;
    private javax.swing.JMenuItem mniAddParticles;
    private javax.swing.JMenuItem mniAddSound;
    private javax.swing.JMenuItem mniAddSprite;
    private javax.swing.JMenuItem mniAddWorld;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniGenerateCode;
    private javax.swing.JMenuItem mniGenerateEBOOT;
    private javax.swing.JMenuItem mniNewGame;
    private javax.swing.JMenuItem mniOpenGame;
    private javax.swing.JMenuItem mniSaveGame;
    private javax.swing.JMenuItem mniTest;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGame;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuResources;
    private javax.swing.JScrollPane scpMain;
    private javax.swing.JToolBar.Separator separator2;
    private javax.swing.JToolBar.Separator seperator1;
    private javax.swing.JToolBar tbrMain;
    // End of variables declaration//GEN-END:variables
}
